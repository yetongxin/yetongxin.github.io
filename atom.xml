<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yetx&#39;s Blog</title>
  
  <subtitle>Stay Hungry, Stay Foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-02T08:25:26.549Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yetx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jvm 垃圾收集器</title>
    <link href="http://yoursite.com/2019/08/02/jvm-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/"/>
    <id>http://yoursite.com/2019/08/02/jvm-垃圾收集器/</id>
    <published>2019-08-02T06:14:29.000Z</published>
    <updated>2019-08-02T08:25:26.549Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对象存活判断"><a href="#对象存活判断" class="headerlink" title="对象存活判断"></a>对象存活判断</h1><h2 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h2><p>给对象添加一个引用计数器，一个地方引用它就加1，引用失效就减1，计数器值为0对象就是不可以再使用的  </p><p>缺点：难以解决对象之间相互循环引用的问题。  </p><p>例如：obj1.item = obj2; obj2.item = obj1，即使已经无效，引用计数也不为0，无法回收。</p><h2 id="可达性分析"><a href="#可达性分析" class="headerlink" title="可达性分析"></a>可达性分析</h2><p>以一系列的“GC Roots”作为起始点，从这些节点开始往下面搜索，搜索路径叫做引用链，当一个对象不存在与GC Roots相连的引用链（图的不可达），证明对象不可用。  </p><p>GC Root通常包括以下几种：</p><ul><li>虚拟机栈（栈帧中的本地变量表）中引用的对象；</li><li>方法区中类静态属性引用的对象；</li><li>方法区中常量引用的对象；</li><li>本地方法栈中JNI（即一般说的Native方法）引用的对象；</li></ul><h2 id="引用分类"><a href="#引用分类" class="headerlink" title="引用分类"></a>引用分类</h2><ul><li>强引用：类似Object obj = new Object()，强引用存在时垃圾收集器永远不会回收</li><li>软引用：SoftReference类，将要发生内存溢出前进行第二次回收，如果这次回收后内存还是不够，抛内存溢出异常</li><li>弱引用：WeakReference类，只能生存到下一次GC前，内存足够也会回收</li><li>虚·引用：PhantomReference类，不影响实例生存时间，无法取得实例，唯一作用是被GC时收到一个系统通知</li></ul><h2 id="finalize-方法"><a href="#finalize-方法" class="headerlink" title="finalize()方法"></a>finalize()方法</h2><p>宣告对象死亡至少需要2次标记过程：与GC ROOT无相连引用链被标记，再判断是否有必要执行finalize()方法，如果没有覆盖finalize()方法或者finalize()已经被调用过就认为是没必要执行。否则需要执行finalize()方法，此对象放入F-Queue队列中，由JVM的低优先级Finalizer线程去执行。稍后，GC会对F-Queue的对象进行第二次标记，如果对象在finalize()方法中拯救了自己（重新被引用），则将会被移出要回收的集合。  </p><p>finalize()只会被调用一次，只能自救一回。  </p><p>一般不覆盖finalize()方法，该方法设计之初是为了迎合C++语法的析构函数，应该用try-finally取代之。</p><h2 id="方法区（永久代）的GC"><a href="#方法区（永久代）的GC" class="headerlink" title="方法区（永久代）的GC"></a>方法区（永久代）的GC</h2><p>主要回收两部分内容：废弃常量和无用的类</p><p>废弃常量：比如“abc”不被引用了，会被清理出常量池</p><p>无用的类：需同时满足以下条件</p><ol><li>该类所有实例已被回收；</li><li>加载该类的ClassLoader已被回收；</li><li>该类的Class对象没有任何地方被引用，无法在任何地方通过反射访问该类的方法。</li></ol><h1 id="垃圾收集算法（思想）"><a href="#垃圾收集算法（思想）" class="headerlink" title="垃圾收集算法（思想）"></a>垃圾收集算法（思想）</h1><h2 id="标记清除算法（Mark-Sweep）算法："><a href="#标记清除算法（Mark-Sweep）算法：" class="headerlink" title="标记清除算法（Mark-Sweep）算法："></a>标记清除算法（Mark-Sweep）算法：</h2><p>先标记出所有需要回收的对象，然后统一回收被标记需要回收的对象。<br>缺点： 标记和清除效率不高。会产生大量不连续的内存碎片，导致分配大对象时不得不触发另一次垃圾收集动作。</p><p><strong>主要用于老年代（tenured generation）</strong></p><h2 id="复制（Copying）算法"><a href="#复制（Copying）算法" class="headerlink" title="复制（Copying）算法"></a>复制（Copying）算法</h2><p>内存划分成等大小的两块，只有一块在使用，GC时将存活对象复制到另一块区域中，清除另一半。</p><p>缺点：有一半内存浪费，复制操作效率低，不适合老年代。（老年代存活率较高需要较多复制操作，不想浪费50%空间还得分配担保，而没有额外空间给老年代分配担保）</p><p>实际使用中并不是一半一半的内存分配，因为大部分对象生命周期很短，所以划分成一块很大的Eden区和两块小的Survivor区，一般默认8:1:1的比例。每次使用一块Eden和一块Survivor区，GC时将Eden和Survivor中存活的对象复制到另一块Survivor区中。当Survivor区不够大时，使用老年代进行分配担保，存活对象放入老年代。</p><p><strong>主要用于新生代（new generation）</strong></p><h2 id="标记-整理算法-Mark-Compact"><a href="#标记-整理算法-Mark-Compact" class="headerlink" title="标记-整理算法(Mark-Compact)"></a>标记-整理算法(Mark-Compact)</h2><p>标记过程和标记清除算法一样，标记之后存活的对象向一端移动，最后清理掉边界以外的内存，保证内存的规整。</p><h1 id="安全点"><a href="#安全点" class="headerlink" title="安全点"></a>安全点</h1><p>HotSpot 虚拟机采取的是可达性分析算法。即通过 GC Roots 枚举判定待回收的对象。</p><p>那么，首先要找到哪些是 GC Roots。</p><p>有两种查找 GC Roots 的方法：</p><p>一种是遍历方法区和栈区查找（保守式 GC）。<br>一种是通过 OopMap 数据结构来记录 GC Roots 的位置（准确式 GC）。</p><p>OopMap这个数据结构维护哪些地方存放着对象引用，记录栈上本地变量与堆中对象的引用关系，方便枚举GC Root。</p><p>在执行 GC 操作时，所有的工作线程必须停顿，这就是所谓的”Stop-The-World”。因为可达性分析算法必须是在一个确保一致性的内存快照中进行。如果在分析的过程中对象引用关系还在不断变化，分析结果的准确性就不能保证。</p><p>Hotspot并没有为每条指令都生成oopmap,只是在某些特定位置生成，这个对应 OopMap 的位置叫做安全点（Safe Point）。</p><p>网上看到的关于安全点的理解：</p><blockquote><p>从线程角度看，safepoint可以理解成是在代码执行过程中的一些特殊位置，当线程执行到这些位置的时候，说明虚拟机当前的状态是安全的，如果有需要，可以在这个位置暂停，比如发生GC时，需要暂停暂停所以活动线程，但是线程在这个时刻，还没有执行到一个安全点，所以该线程应该继续执行，到达下一个安全点的时候暂停，等待GC结束。</p><p>CPU在执行运算过程时需要把数据从内存中载入到寄存器，运算完后再从寄存器中载入到内存中，Java中对象地址也是这么个过程，<em>设想如果一个Java线程分配一个对象，此时对象的地址还在寄存器中，这时候这个线程失去了CPU 时间片，而此时STW GC发现没有任何GC ROOTS与该对象关联起来，此时这个对象呗认为是垃圾并被回收了，之后CPU重新获得时间片后发现此时对象已经不存在了这时候程序就GG了。</em></p></blockquote><p>一般会在如下几个位置选择安全点：</p><ol><li>循环的末尾</li><li>方法临返回前</li><li>调用方法之后</li><li>抛异常的位置</li></ol><p>那怎么让所有线程都跑到安全点呢？方法有二：</p><ol><li>抢先式中断：GC时先中断所有线程，对于还没跑到安全点的线程，让其恢复并等它跑到安全点上再停。——现在几乎没有这样实现的；</li><li>主动式中断：GC需要中断线程时，设置一个标志，各个线程执行时，跑到安全点的时候轮询这个标志，发现标志为真的时候自己中断挂起。</li></ol><p>接下来又遇到如果程序不执行（如Sleep、Block）时无法响应JVM的中断请求的问题，就需要安全区域来解决：  </p><p>线程执行到安全区域的时候，标识自己进入了安全区域；则发动GC的时候，可以忽略标识为安全区域的线程；而线程在离开安全区域的时候，需要检查是否已完成GC Root枚举（或者是整个GC过程），没完成的话要GC发出等待离开的信号。</p><h1 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h1><p><img src="https://upload-images.jianshu.io/upload_images/13526931-d3ec30c62b4dfc59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt>  中间有连线的标识可以搭配使用。</p><h2 id="Serial"><a href="#Serial" class="headerlink" title="Serial"></a>Serial</h2><ul><li>最基本的</li><li>单线程，串行。现常用于客户端</li></ul><h2 id="ParNew收集器"><a href="#ParNew收集器" class="headerlink" title="ParNew收集器"></a>ParNew收集器</h2><p>ParNew收集器其实就是Serial收集器的多线程版本。<br>年轻代，能与CMS收集器共用（是-XX:+UseConcMarkSweepGC的默认收集器），也可以使用-XX:+UseParNewGC来强制指定</p><h2 id="Parallel-Scavenge收集器"><a href="#Parallel-Scavenge收集器" class="headerlink" title="Parallel Scavenge收集器"></a>Parallel Scavenge收集器</h2><p>新生代收集器，多线程、复制算法<br>类似ParNew收集器，Parallel收集器更关注系统的吞吐量。<br>吞吐量=(执行用户代码时间)/(执行用户代码时间+垃圾回收占用时间)<br>-XX:MaxGCPauserMillis 垃圾收集器停顿时间<br>-XX:GCTimeRatio 垃圾收集时间占总数比率（0-100）默认为99，GC比例1/（1+99）=1%<br>-XX:+UseAdaptiveSizePolicy 开关参数，开了之后，-Xmn,-XX:SurvivorRatio、-XX:PretenureSizeThredshold不再需要手工指定</p><h2 id="Serial-Old收集器"><a href="#Serial-Old收集器" class="headerlink" title="Serial Old收集器"></a>Serial Old收集器</h2><p>Serial收集器的老年代版本，单线程，标记-整理算法。</p><h2 id="Parallel-Old收集器"><a href="#Parallel-Old收集器" class="headerlink" title="Parallel Old收集器"></a>Parallel Old收集器</h2><p>Parallel Scavenge收集器的老年代版本，多线程，标记-整理算法，JDK1.6开始提供。</p><h2 id="CMS收集器"><a href="#CMS收集器" class="headerlink" title="CMS收集器"></a>CMS收集器</h2><p>老年代收集，设计目标是获取最短回收停顿时间，基于标记-清除算法设计，包括以下步骤：</p><ol><li>初始标记：标记GC Root可以直接关联到的对象，速度很快，需要Stop The World；</li><li>并发标记：可达性分析枚举，耗时较长；可与用户线程并发执行</li><li>重新标记：修正并发标记期间因用户程序继续运行而导致的引用变动，需要Stop The World；</li><li>并发清除：耗时较长。可与用户线程并发执行</li></ol><p>缺点：</p><ul><li>对CPU资源敏感，并发阶段总吞吐量降低，CPU数量少的时候对用户程序影响大；</li><li>无法处理浮动垃圾（Floating Garbage），即并发清理阶段新产生的垃圾，要等到下一次GC；因此需要预留内存空间给用户线程使用，不能等内存快满才进行收集；</li><li>收集后产生内存碎片。（基于标记清除算法）</li></ul><h2 id="G1收集器"><a href="#G1收集器" class="headerlink" title="G1收集器"></a>G1收集器</h2><ul><li>并行与并发。可以真正的不停止应用来收集垃圾。</li><li>分代收集</li><li>空间整合</li><li>可预测的停顿</li></ul><p>G1收集器将整个Java堆划分成多个大小相等的独立区域（Region），跟踪各个Region里面垃圾堆积的价值（根据回收所获得的空间大小及回收耗费时间的经验值），维护优先列表，每次收集的时候，根据允许的收集时间，优先回收价值更大的Region。<br>此外每个Region维护一个Remembered Set来避免全堆扫描，引用型数据进行写操作的时候，会产生中断写操作，检查引用的对象是否处于不同的Region，如果是，则记录到被引用对象所属的Remember Set中；那么在GC时，GC Root的枚举范围加入Remembered Set，保证不进行全堆扫描也不会有遗漏。</p><p>回收步骤包括：</p><ol><li>初始标记：与CMS一样；</li><li>并发标记：与CMS一样，包含Remembered Set；</li><li>最终标记：并发标记期间对象变化记录到Remembered Set Logs中，合并到Remembered Set；</li><li>筛选回收：先根据回收价值和回收成本进行排序，再根据用户期望GC停顿时间制定回收计划。</li></ol><h1 id="内存分配与回收策略"><a href="#内存分配与回收策略" class="headerlink" title="内存分配与回收策略"></a>内存分配与回收策略</h1><p>-XX:+PrintGCDetails GC时打印内存回收日志</p><h2 id="对象优先在Eden分配"><a href="#对象优先在Eden分配" class="headerlink" title="对象优先在Eden分配"></a>对象优先在Eden分配</h2><p>多数情况下，对象在新生代Eden区分配，当Eden区空间不够时，发起Minor GC；</p><h2 id="大对象直接进入老年代"><a href="#大对象直接进入老年代" class="headerlink" title="大对象直接进入老年代"></a>大对象直接进入老年代</h2><p>大对象会导致虚拟机触发垃圾收集来获取连续空间安置它们<br>提供-XX:PretenureSizeThreshold参数，大于此值的对象直接在老年代分配，避免在Eden区和Survivor区之间大量内存复制；</p><h2 id="长期存活的对象将进入老年代"><a href="#长期存活的对象将进入老年代" class="headerlink" title="长期存活的对象将进入老年代"></a>长期存活的对象将进入老年代</h2><p>JVM给每个对象定义一个Age计数器，在Eden出生并经过一次Minor GC后仍然存活，并且能被Suvivor容纳后将被移到Suvivor空间中并设置age = 1,接下来每熬过一次minor GC将+1,大到一定程度将晋升到老年代。默认15岁，通过-XX:MaxTenuringThreshold设置</p><h2 id="动态对象年龄判定"><a href="#动态对象年龄判定" class="headerlink" title="动态对象年龄判定"></a>动态对象年龄判定</h2><p>若Survivor区中同年龄所有对象大小总和大于Survivor空间一半，则年龄大于等于该年龄的对象可以直接进入老年代；</p><h2 id="空间分配担保："><a href="#空间分配担保：" class="headerlink" title="空间分配担保："></a>空间分配担保：</h2><p>Minor GC之前，JVM检查老年代最大可用连续空间大于新生代所有对象总空间，成立的话Minor GC确认是安全的；否则检查老年代最大可用连续空间大于历次晋升到老年代对象的平均大小，大于的话进行Minor GC；小于的话进行Full GC。</p><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><h2 id="关于java的堆"><a href="#关于java的堆" class="headerlink" title="关于java的堆"></a>关于java的堆</h2><blockquote><p>这个部分可以参考博客：<a href="https://blog.csdn.net/sted_zxz/article/details/72476673" target="_blank" rel="noopener">https://blog.csdn.net/sted_zxz/article/details/72476673</a></p></blockquote><p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象，如下图所示：<br><img src="https://upload-images.jianshu.io/upload_images/13526931-aec08ae57df3cd21?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>GC 分为两种：Minor GC、Full GC ( 或称为 Major GC )。<br>Minor GC指发生在新生代的GC，频繁且快<br>Full GC指发生在老年代的GC，慢</p><p>另外还有个永久代：<br>永久代是Hotspot虚拟机特有的概念，是方法区的一种实现，别的JVM都没有这个东西。在Java 8中，永久代被彻底移除，取而代之的是另一块与堆不相连的本地内存——元空间。<br>永久代或者“Perm Gen”包含了JVM需要的应用元数据，这些元数据描述了在应用里使用的类和方法。注意，永久代不是Java堆内存的一部分。永久代存放JVM运行时使用的类。永久代同样包含了Java SE库的类和方法。永久代的对象在full GC时进行垃圾收集。</p><h2 id="一些控制参数："><a href="#一些控制参数：" class="headerlink" title="一些控制参数："></a>一些控制参数：</h2><p>-Xms设置堆的最小空间大小。<br>-Xmx设置堆的最大空间大小。<br>-Xmn：新生代的大小<br>-XX:NewSize设置新生代最小空间大小。<br>-XX:MaxNewSize设置新生代最大空间大小。<br>-XX:PermSize设置永久代最小空间大小。<br>-XX:MaxPermSize设置永久代最大空间大小。<br>-Xss设置每个线程的堆栈大小。<br>-XX:MetaspaceSize，初始空间大小，达到该值就会触发垃圾收集进行类型卸载，同时GC会对该值进行调整：如果释放了大量的空间，就适当降低该值；如果释放了很少的空间，那么在不超过MaxMetaspaceSize时，适当提高该值。<br>-XX:MaxMetaspaceSize，最大空间，默认是没有限制的。<br>-XX:MinMetaspaceFreeRatio，在GC之后，最小的Metaspace剩余空间容量的百分比，减少为分配空间所导致的垃圾收集<br>-XX:MaxMetaspaceFreeRatio，在GC之后，最大的Metaspace剩余空间容量的百分比，减少为释放空间所导致的垃圾收集 </p>]]></content>
    
    <summary type="html">
    
      深入理解Java虚拟机 第3章的一些笔记，方便后面回顾
    
    </summary>
    
      <category term="jvm" scheme="http://yoursite.com/categories/jvm/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="jvm" scheme="http://yoursite.com/tags/jvm/"/>
    
      <category term="gc" scheme="http://yoursite.com/tags/gc/"/>
    
  </entry>
  
  <entry>
    <title>二叉树创建与遍历</title>
    <link href="http://yoursite.com/2019/08/01/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%81%8D%E5%8E%86/"/>
    <id>http://yoursite.com/2019/08/01/二叉树创建与遍历/</id>
    <published>2019-08-01T09:05:40.000Z</published>
    <updated>2019-08-01T09:26:03.238Z</updated>
    
    <content type="html"><![CDATA[<h5 id="节点定义："><a href="#节点定义：" class="headerlink" title="节点定义："></a>节点定义：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class BinNode &#123;</span><br><span class="line">public:</span><br><span class="line">char data;</span><br><span class="line">BinNode* parent;</span><br><span class="line">BinNode* lchild;</span><br><span class="line">BinNode* rchild;</span><br><span class="line">BinNode()&#123; lchild = NULL; rchild = NULL; parent = NULL; &#125;</span><br><span class="line">BinNode(char data2):data(data2) &#123;</span><br><span class="line">lchild = NULL; rchild = NULL; parent = NULL;</span><br><span class="line">&#125;</span><br><span class="line">BinNode(char data2, BinNode* parent2):data(data2) &#123;</span><br><span class="line">lchild = NULL; rchild = NULL; parent = parent2;</span><br><span class="line">&#125;</span><br><span class="line">void insertAsLeft(char data) &#123;</span><br><span class="line">lchild = new BinNode(data,this);</span><br><span class="line">&#125;</span><br><span class="line">void insertAsRight( char data) &#123;</span><br><span class="line">rchild = new BinNode(data,this);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="树的定义："><a href="#树的定义：" class="headerlink" title="树的定义："></a>树的定义：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class BinTree &#123;</span><br><span class="line">private:</span><br><span class="line">BinNode* root;</span><br><span class="line">string strtree;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">BinTree() &#123;</span><br><span class="line">root = NULL;</span><br><span class="line">&#125;</span><br><span class="line">    BinNode* getRoot() &#123; return root; &#125;//获取根节点</span><br><span class="line">    void creatBTreeBycengci(string arr);//层次遍历产生一颗树，参考层次遍历</span><br><span class="line">    void creatBTreeByString(string str) ;//通过一个字符串创建一棵树，调用creatBTree</span><br><span class="line">    BinNode* creatBTree(int&amp; pos);//通过先序遍历产生一棵树，使用递归</span><br><span class="line">    void preorder(BinNode* T) ;//先序遍历以T为根节点的子树，递归</span><br><span class="line">    void inorder(BinNode* T) ;//中序遍历以T为根节点的子树，递归</span><br><span class="line">    void postorder(BinNode* T) ;//后序遍历以T为根节点的字数，递归</span><br><span class="line"></span><br><span class="line">    void preorderByStack(BinNode* T);//先序遍历以T为根节点的子树，非递归</span><br><span class="line">    void inorderByStack(BinNode* T);//中序遍历以T为根节点的子树，非递归</span><br><span class="line">    void cengciByQueue(BinNode* T);//层次遍历，利用队列</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="以下是各种方法的实现"><a href="#以下是各种方法的实现" class="headerlink" title="以下是各种方法的实现:"></a>以下是各种方法的实现:</h5><p>首先是通过一个字符串先序遍历创建一颗树</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void creatBTreeByString(string str) &#123;</span><br><span class="line">int pos = 0;</span><br><span class="line">strtree.assign(str);</span><br><span class="line">root = creatBTree(pos);</span><br><span class="line">&#125;</span><br><span class="line">BinNode* creatBTree(int&amp; pos) &#123;</span><br><span class="line">BinNode* T;</span><br><span class="line">char ch = strtree[pos++];</span><br><span class="line">if (ch == &apos;0&apos;)T = NULL;</span><br><span class="line">else &#123;</span><br><span class="line">T = new BinNode(ch);</span><br><span class="line">T-&gt;lchild = creatBTree(pos);</span><br><span class="line">T-&gt;rchild = creatBTree(pos);</span><br><span class="line">&#125;</span><br><span class="line">return T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先序遍历、中序遍历、后序遍历的递归版本，此处无传如visit函数，只是访问节点的数据并输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">void preorder(BinNode* T) &#123;</span><br><span class="line">if (T == NULL)return;</span><br><span class="line">char ch = T-&gt;data;</span><br><span class="line">cout &lt;&lt; ch;</span><br><span class="line">preorder(T-&gt;lchild);</span><br><span class="line">preorder(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">void inorder(BinNode* T) &#123;//中序遍历以T为根节点的子树</span><br><span class="line">if (T == NULL)return;</span><br><span class="line">inorder(T-&gt;lchild);</span><br><span class="line">char ch = T-&gt;data;</span><br><span class="line">cout &lt;&lt; ch;</span><br><span class="line">inorder(T-&gt;rchild);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">void postorder(BinNode* T) &#123;</span><br><span class="line">if (T == NULL)return;</span><br><span class="line">postorder(T-&gt;lchild);</span><br><span class="line">postorder(T-&gt;rchild);</span><br><span class="line">char ch = T-&gt;data;</span><br><span class="line">cout &lt;&lt; ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先序遍历的非递归版本（使用栈）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void preorderByStack(BinNode* T) &#123;</span><br><span class="line">stack&lt;BinNode*&gt; st;</span><br><span class="line">while (1) &#123;</span><br><span class="line">while (T != NULL) &#123;</span><br><span class="line">cout &lt;&lt; T-&gt;data ;// visit(T),先访问左孩子</span><br><span class="line">st.push(T-&gt;rchild);//右孩子入栈，NULL也入栈，有进行判断，不会访问NULL</span><br><span class="line">T = T-&gt;lchild;//T 继续指向下一个左孩子</span><br><span class="line">&#125;</span><br><span class="line">if (st.empty())break;//所有右孩子都访问完了，结束。栈底是最上面的右孩子（它最先入栈）</span><br><span class="line">T = st.top(); st.pop();//pop出栈顶的右孩子，对其进行遍历</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中序遍历的非递归版本（使用栈）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">void inorderByStack(BinNode* T) &#123;</span><br><span class="line">stack&lt;BinNode*&gt; st;</span><br><span class="line">while (1)</span><br><span class="line">&#123;</span><br><span class="line">while (T != NULL) &#123;</span><br><span class="line">st.push(T); T = T-&gt;lchild;//当跑到最左下方时，</span><br><span class="line">                                        //当前节点即是left root right 中的root节点，</span><br><span class="line">                                       //此时left相当于已经访问过，故接下来应该将控制权转给right</span><br><span class="line">&#125;</span><br><span class="line">if (!st.empty()) &#123;</span><br><span class="line">T = st.top(); st.pop();</span><br><span class="line">cout &lt;&lt; T-&gt;data;//visit();每个节点访问完后都会试图访问 以右孩子为根节点的树，</span><br><span class="line">                              //完了之后才会访问这个节点对应的父节点（即当前的栈顶）</span><br><span class="line">T = T-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>层次遍历（使用队列）:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void cengciByQueue(BinNode* T) &#123;</span><br><span class="line">queue&lt;BinNode*&gt; q;</span><br><span class="line">q.push(T);//首先会push进根节点</span><br><span class="line">while (!q.empty()) &#123;</span><br><span class="line">T = q.front(); q.pop();</span><br><span class="line">cout &lt;&lt; T-&gt;data;//visit()</span><br><span class="line">if (T-&gt;lchild)q.push(T-&gt;lchild);</span><br><span class="line">if (T-&gt;rchild)q.push(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>给出一个字符串，可参考层次遍历的方法创建一棵树（使用队列）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">void creatBTreeBycengci(string arr) &#123;//层次遍历产生一颗树，参考层次遍历</span><br><span class="line">int pos = 0;</span><br><span class="line">queue&lt;BinNode*&gt; q2;</span><br><span class="line">char data = arr[pos++];</span><br><span class="line">root = new BinNode(data);</span><br><span class="line"></span><br><span class="line">q2.push(root);</span><br><span class="line">BinNode* T = root;</span><br><span class="line">while (pos!=arr.length() ) &#123;</span><br><span class="line">T = q2.front(); q2.pop();</span><br><span class="line"></span><br><span class="line">data = arr[pos++];</span><br><span class="line">if (data != &apos;0&apos;)T-&gt;lchild = new BinNode(data);</span><br><span class="line">elseT-&gt;lchild = NULL;</span><br><span class="line">data = arr[pos++];</span><br><span class="line">if (data != &apos;0&apos;)T-&gt;rchild = new BinNode(data);</span><br><span class="line">elseT-&gt;rchild = NULL;</span><br><span class="line"></span><br><span class="line">if(T-&gt;lchild)q2.push(T-&gt;lchild);//存在才推进去</span><br><span class="line">if(T-&gt;rchild)q2.push(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      当初学二叉树的小笔记，除了常规的递归方法遍历二叉树外，还记录了先序、中序遍历的非递归版本
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://yoursite.com/2019/08/01/test/"/>
    <id>http://yoursite.com/2019/08/01/test/</id>
    <published>2019-08-01T07:55:54.000Z</published>
    <updated>2019-08-01T07:56:55.811Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我是一级标题"><a href="#我是一级标题" class="headerlink" title="我是一级标题"></a>我是一级标题</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;我是一级标题&quot;&gt;&lt;a href=&quot;#我是一级标题&quot; class=&quot;headerlink&quot; title=&quot;我是一级标题&quot;&gt;&lt;/a&gt;我是一级标题&lt;/h1&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我的博文</title>
    <link href="http://yoursite.com/2019/08/01/%E6%88%91%E7%9A%84%E5%8D%9A%E6%96%87/"/>
    <id>http://yoursite.com/2019/08/01/我的博文/</id>
    <published>2019-08-01T07:37:42.000Z</published>
    <updated>2019-08-01T07:37:42.247Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexoblog1</title>
    <link href="http://yoursite.com/2019/08/01/hexoblog1/"/>
    <id>http://yoursite.com/2019/08/01/hexoblog1/</id>
    <published>2019-08-01T07:14:43.000Z</published>
    <updated>2019-08-01T07:54:13.171Z</updated>
    
    <content type="html"><![CDATA[<p>javascript是一门充满活力、简单易用的语言，又是一门具有许多复杂微妙技术的语言。即使是经验丰富的javascript开发者，如果没有认真学习的话，也无法真正理解它们，这就是javascript的矛盾之处。由于javascript不必理解就可以使用，因此通常来说很难真正理解语言本身，这就是我们面临的挑战。不满足于只是让代码正常工作，而是想要弄清楚为什么，勇于挑战这条崎岖颠簸的少有人走的路，拥抱整个javascript<br>后面的内容在首页不显示，只显示到这里</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;javascript是一门充满活力、简单易用的语言，又是一门具有许多复杂微妙技术的语言。即使是经验丰富的javascript开发者，如果没有认真学习的话，也无法真正理解它们，这就是javascript的矛盾之处。由于javascript不必理解就可以使用，因此通常来说很难真
      
    
    </summary>
    
      <category term="博客相关" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="first" scheme="http://yoursite.com/tags/first/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/08/01/hello-world/"/>
    <id>http://yoursite.com/2019/08/01/hello-world/</id>
    <published>2019-08-01T07:00:26.338Z</published>
    <updated>2019-08-01T07:00:26.338Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
